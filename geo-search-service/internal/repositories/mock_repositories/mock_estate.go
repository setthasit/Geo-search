// Code generated by MockGen. DO NOT EDIT.
// Source: estate.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	entities "geo-search/internal/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEstateRepository is a mock of EstateRepository interface.
type MockEstateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEstateRepositoryMockRecorder
}

// MockEstateRepositoryMockRecorder is the mock recorder for MockEstateRepository.
type MockEstateRepositoryMockRecorder struct {
	mock *MockEstateRepository
}

// NewMockEstateRepository creates a new mock instance.
func NewMockEstateRepository(ctrl *gomock.Controller) *MockEstateRepository {
	mock := &MockEstateRepository{ctrl: ctrl}
	mock.recorder = &MockEstateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEstateRepository) EXPECT() *MockEstateRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEstateRepository) Create(ctx context.Context, estate *entities.Estate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, estate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEstateRepositoryMockRecorder) Create(ctx, estate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEstateRepository)(nil).Create), ctx, estate)
}

// GetAll mocks base method.
func (m *MockEstateRepository) GetAll(ctx context.Context) ([]entities.Estate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]entities.Estate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockEstateRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockEstateRepository)(nil).GetAll), ctx)
}

// GetByBoundBox mocks base method.
func (m *MockEstateRepository) GetByBoundBox(ctx context.Context, topLeft, bottomRight *entities.Location) ([]entities.Estate, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBoundBox", ctx, topLeft, bottomRight)
	ret0, _ := ret[0].([]entities.Estate)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByBoundBox indicates an expected call of GetByBoundBox.
func (mr *MockEstateRepositoryMockRecorder) GetByBoundBox(ctx, topLeft, bottomRight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBoundBox", reflect.TypeOf((*MockEstateRepository)(nil).GetByBoundBox), ctx, topLeft, bottomRight)
}

// GetByID mocks base method.
func (m *MockEstateRepository) GetByID(ctx context.Context, id uint) (*entities.Estate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entities.Estate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockEstateRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockEstateRepository)(nil).GetByID), ctx, id)
}
